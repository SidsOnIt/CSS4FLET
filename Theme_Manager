import logging
from typing import Dict, Any, Optional, Set
import flet as ft
import concurrent.futures
import multiprocessing
from functools import lru_cache

class ThemeManager:
    def __init__(self, page: ft.Page):
        self.page = page
        self.logger = logging.getLogger(__name__)
        self._themes: Dict[str, Dict[str, Any]] = {}
        self._theme_groups: Dict[str, Dict[str, Any]] = {}
        self._current_theme: Optional[str] = None
        self._current_styles: Dict[str, Any] = {}
        
        self._executor = concurrent.futures.ThreadPoolExecutor(
            max_workers=min(32, (multiprocessing.cpu_count() * 2) + 1)
        )
        
        self._valid_style_properties = self._initialize_valid_properties()
        
    @staticmethod
    @lru_cache(maxsize=1)
    def _initialize_valid_properties() -> Set[str]:
        return {
            'bgcolor', 'color', 'font_family', 'size', 'weight',
            'style', 'text_align', 'text_style', 'label_style',
            'border_color', 'focused_border_color', 'cursor_color',
            'focused_bgcolor', 'border_radius', 'padding'
        }

    def _apply_text_styles(self, control: ft.Control, style_class: str, value: Any) -> None:
        if isinstance(control, (ft.TextField, ft.Dropdown)):
            if style_class == 'font_family':
                text_style = ft.TextStyle(font_family=value)
                control.text_style = text_style
                control.label_style = text_style
                if isinstance(control, ft.TextField):
                    control.hint_style = text_style
            elif style_class == 'label_style':
                control.text_style = value
                control.label_style = value
                if isinstance(control, ft.TextField):
                    control.hint_style = value

    def _traverse_controls(self, control, callback):
        stack = [control]
        while stack:
            current = stack.pop()
            callback(current)
            
            if hasattr(current, 'controls'):
                stack.extend(current.controls)
            if hasattr(current, 'content'):
                if isinstance(current.content, list):
                    stack.extend(current.content)
                elif isinstance(current.content, ft.Control):
                    stack.append(current.content)

    def _process_control(self, control, style_class: str, value: Any, group_name: str = None) -> None:
        if not isinstance(control, ft.Control):
            return
            
        if hasattr(control, 'data') and isinstance(control.data, dict):
            should_apply = False
            if group_name:
                should_apply = 'group' in control.data and group_name in control.data['group']
            else:
                should_apply = 'class' in control.data and style_class in control.data['class']

            if should_apply and hasattr(control, style_class):
                try:
                    setattr(control, style_class, value)
                    self._apply_text_styles(control, style_class, value)
                    if control.page:
                        control.update()
                except Exception as e:
                    self.logger.error(f"Error updating control: {e}")

    def validate_theme(self, theme: Dict[str, Any]) -> bool:
        return all(
            key in self._valid_style_properties 
            for key in theme.keys()
        )

    def load_mode_themes(self, themes: Dict[str, Dict[str, Any]]) -> None:
        if not isinstance(themes, dict):
            self.logger.warning("Themes must be a dictionary")
            return
        
        self._themes = themes
        if not self._current_theme and themes:
            self._current_theme = list(themes.keys())[0]
    
    def load_group_themes(self, theme_groups: Dict[str, Dict[str, Any]]) -> None:
        if not isinstance(theme_groups, dict):
            self.logger.warning("Theme groups must be a dictionary")
            return
        
        self._theme_groups = theme_groups
    
    def set_global_theme(self, global_theme: Dict[str, Any]) -> None:
        self.load_mode_themes({"global": global_theme})
        self.apply_theme("global")

    def update_group_style(self, group_name: str, style_class: str, value: Any) -> None:
        if group_name in self._theme_groups:
            self._theme_groups[group_name][style_class] = value
            self.apply_group(group_name)

    def toggle_group(self, group_name: str) -> None:
        if group_name in self._theme_groups:
            current_state = self._theme_groups[group_name].get('enabled', True)
            self._theme_groups[group_name]['enabled'] = not current_state
            self.apply_group(group_name)

    def apply_all_groups(self) -> None:
        for group_name in self._theme_groups:
            self.apply_group(group_name)

    def update_style(self, style_class: str, value: Any) -> None:
        self._current_styles[style_class] = value
        for control in self.page.controls:
            self._traverse_controls(control, lambda c: self._process_control(c, style_class, value))

    def apply_theme(self, theme_name: str) -> None:
        if theme_name not in self._themes:
            self.logger.warning(f"Theme {theme_name} not found")
            return
        
        theme = self._themes[theme_name]
        self._current_theme = theme_name
        self._current_styles.clear()
        
        if not self.page.controls:
            self.page.on_load = lambda _: self._apply_theme_internal(theme)
        else:
            self._apply_theme_internal(theme)

    def loader(
        self,
        global_theme: Dict[str, Any],
        mode_themes: Dict[str, Dict[str, Any]],
        group_themes: Dict[str, Dict[str, Any]],
        initial_theme: str = 'dark'
    ) -> None:
        self.set_global_theme(global_theme)
        self.load_mode_themes(mode_themes)
        self.load_group_themes(group_themes)
        
        def on_page_load(_):
            self.apply_theme(initial_theme)
            self.apply_all_groups()
            
        if self.page.controls:
            on_page_load(None)
        else:
            self.page.on_load = on_page_load

    def _apply_theme_internal(self, theme: Dict[str, Any]) -> None:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = [
                executor.submit(self.update_style, style_class, value)
                for style_class, value in theme.items()
            ]
            concurrent.futures.wait(futures)
        self.page.update()
        
    def apply_group(self, group_name: str) -> None:
        if group_name not in self._theme_groups:
            return
        
        group = self._theme_groups[group_name]
        for style_class, value in group.items():
            for control in self.page.controls:
                self._traverse_controls(control, lambda c: self._process_control(c, style_class, value, group_name))
        
        self.page.update()
        
    def toggle_theme(self) -> None:
        if not self._themes:
            return
        
        theme_names = list(self._themes.keys())
        current_idx = theme_names.index(self._current_theme)
        next_idx = (current_idx + 1) % len(theme_names)
        
        self.apply_theme(theme_names[next_idx])

    def apply_current_theme_to_control(self, control: ft.Control) -> None:
        if not self._current_theme or not self._themes:
            return

        for style_class, value in self._current_styles.items():
            self._traverse_controls(control, lambda c: self._process_control(c, style_class, value))

    def cleanup(self):
        self._executor.shutdown(wait=True)
        self._themes.clear()
        self._theme_groups.clear()
